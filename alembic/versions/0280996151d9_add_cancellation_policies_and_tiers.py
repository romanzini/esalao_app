"""Mako template for Alembic migrations."""

"""Add cancellation policies and tiers

Revision ID: 0280996151d9
Revises: 472b4a8e2fcb
Create Date: 2025-10-20 16:43:31.804208

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = '0280996151d9'
down_revision = '472b4a8e2fcb'
branch_labels = None
depends_on = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('cancellation_policies',
    sa.Column('name', sa.String(length=100), nullable=False, comment='Policy name for identification'),
    sa.Column('description', sa.String(length=500), nullable=True, comment='Policy description'),
    sa.Column('status', sa.Enum('ACTIVE', 'INACTIVE', 'DRAFT', name='cancellationpolicystatus'), nullable=False, comment='Policy status'),
    sa.Column('salon_id', sa.Integer(), nullable=True, comment='Salon this policy applies to (null = global)'),
    sa.Column('is_default', sa.Boolean(), nullable=False, comment='Whether this is the default policy'),
    sa.Column('effective_from', sa.DateTime(timezone=True), nullable=False, comment='When policy becomes effective'),
    sa.Column('effective_until', sa.DateTime(timezone=True), nullable=True, comment='When policy expires (null = no expiry)'),
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.CheckConstraint('effective_until IS NULL OR effective_until > effective_from', name='valid_policy_period'),
    sa.ForeignKeyConstraint(['salon_id'], ['salons.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('cancellation_tiers',
    sa.Column('policy_id', sa.Integer(), nullable=False, comment='Cancellation policy this tier belongs to'),
    sa.Column('name', sa.String(length=100), nullable=False, comment="Tier name (e.g., 'Last Minute', 'Standard')"),
    sa.Column('advance_notice_hours', sa.Integer(), nullable=False, comment='Minimum advance notice required in hours'),
    sa.Column('fee_type', sa.String(length=20), nullable=False, comment="Fee type: 'percentage' or 'fixed'"),
    sa.Column('fee_value', sa.Numeric(precision=10, scale=2), nullable=False, comment='Fee value (percentage 0-100 or fixed amount)'),
    sa.Column('allows_refund', sa.Boolean(), nullable=False, comment='Whether refund is allowed for this tier'),
    sa.Column('display_order', sa.Integer(), nullable=False, comment='Display order within policy (lower = higher priority)'),
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.CheckConstraint("(fee_type = 'percentage' AND fee_value >= 0 AND fee_value <= 100) OR (fee_type = 'fixed' AND fee_value >= 0)", name='valid_fee_value'),
    sa.CheckConstraint("fee_type IN ('percentage', 'fixed')", name='valid_fee_type'),
    sa.CheckConstraint('advance_notice_hours >= 0', name='valid_advance_notice'),
    sa.ForeignKeyConstraint(['policy_id'], ['cancellation_policies.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('policy_id', 'advance_notice_hours', name='unique_policy_advance_notice'),
    sa.UniqueConstraint('policy_id', 'display_order', name='unique_policy_display_order')
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('cancellation_tiers')
    op.drop_table('cancellation_policies')
    # ### end Alembic commands ###
