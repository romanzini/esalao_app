"""Mako template for Alembic migrations."""

"""Add core entities: User, Salon, Professional, Service, Availability, Booking

Revision ID: 891c705f503c
Revises: 
Create Date: 2025-10-16 17:28:24.182132

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = '891c705f503c'
down_revision = None
branch_labels = None
depends_on = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('users',
    sa.Column('email', sa.String(length=255), nullable=False, comment='User email address (login identifier)'),
    sa.Column('password_hash', sa.String(length=255), nullable=False, comment='Argon2 password hash'),
    sa.Column('full_name', sa.String(length=255), nullable=False, comment='User full name'),
    sa.Column('phone', sa.String(length=20), nullable=True, comment='Contact phone number'),
    sa.Column('role', sa.Enum('CLIENT', 'PROFESSIONAL', 'SALON_OWNER', 'ADMIN', name='userrole', native_enum=False), nullable=False, comment='User role for RBAC'),
    sa.Column('is_active', sa.Boolean(), nullable=False, comment='Whether user account is active'),
    sa.Column('is_verified', sa.Boolean(), nullable=False, comment='Whether email is verified'),
    sa.Column('last_login', sa.DateTime(timezone=True), nullable=True, comment='Timestamp of last successful login'),
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_users_email'), 'users', ['email'], unique=True)
    op.create_table('salons',
    sa.Column('name', sa.String(length=255), nullable=False, comment='Salon business name'),
    sa.Column('description', sa.Text(), nullable=True, comment='Salon description and amenities'),
    sa.Column('cnpj', sa.String(length=18), nullable=False, comment='Brazilian business tax ID (CNPJ)'),
    sa.Column('phone', sa.String(length=20), nullable=False, comment='Primary contact phone'),
    sa.Column('email', sa.String(length=255), nullable=True, comment='Contact email address'),
    sa.Column('address_street', sa.String(length=255), nullable=False, comment='Street address'),
    sa.Column('address_number', sa.String(length=20), nullable=False, comment='Street number'),
    sa.Column('address_complement', sa.String(length=100), nullable=True, comment='Address complement (apt, suite, etc)'),
    sa.Column('address_neighborhood', sa.String(length=100), nullable=False, comment='Neighborhood/district'),
    sa.Column('address_city', sa.String(length=100), nullable=False, comment='City'),
    sa.Column('address_state', sa.String(length=2), nullable=False, comment='State code (UF)'),
    sa.Column('address_zipcode', sa.String(length=10), nullable=False, comment='ZIP/Postal code (CEP)'),
    sa.Column('is_active', sa.Boolean(), nullable=False, comment='Whether salon is accepting bookings'),
    sa.Column('owner_id', sa.Integer(), nullable=False, comment='Salon owner (user with SALON_OWNER role)'),
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['owner_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_salons_cnpj'), 'salons', ['cnpj'], unique=True)
    op.create_index(op.f('ix_salons_name'), 'salons', ['name'], unique=False)
    op.create_index(op.f('ix_salons_owner_id'), 'salons', ['owner_id'], unique=False)
    op.create_table('professionals',
    sa.Column('user_id', sa.Integer(), nullable=False, comment='User account for this professional'),
    sa.Column('salon_id', sa.Integer(), nullable=False, comment='Salon where professional works'),
    sa.Column('specialties', sa.ARRAY(sa.String()), nullable=False, comment='List of specialties (e.g., haircut, manicure, massage)'),
    sa.Column('bio', sa.String(length=500), nullable=True, comment='Professional biography and experience'),
    sa.Column('license_number', sa.String(length=50), nullable=True, comment='Professional license/registration number'),
    sa.Column('is_active', sa.Boolean(), nullable=False, comment='Whether professional is accepting bookings'),
    sa.Column('commission_percentage', sa.Float(), nullable=False, comment='Commission percentage (0-100) for this professional'),
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['salon_id'], ['salons.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_professionals_salon_id'), 'professionals', ['salon_id'], unique=False)
    op.create_index(op.f('ix_professionals_user_id'), 'professionals', ['user_id'], unique=True)
    op.create_table('services',
    sa.Column('salon_id', sa.Integer(), nullable=False, comment='Salon offering this service'),
    sa.Column('name', sa.String(length=255), nullable=False, comment='Service name (e.g., Haircut, Manicure, Massage)'),
    sa.Column('description', sa.Text(), nullable=True, comment='Detailed service description'),
    sa.Column('duration_minutes', sa.Integer(), nullable=False, comment='Service duration in minutes'),
    sa.Column('price', sa.Numeric(precision=10, scale=2), nullable=False, comment='Service price in BRL'),
    sa.Column('category', sa.String(length=100), nullable=True, comment='Service category (e.g., Hair, Nails, Skin)'),
    sa.Column('is_active', sa.Boolean(), nullable=False, comment='Whether service is available for booking'),
    sa.Column('requires_deposit', sa.Boolean(), nullable=False, comment='Whether service requires deposit/prepayment'),
    sa.Column('deposit_percentage', sa.Numeric(precision=5, scale=2), nullable=True, comment='Deposit percentage if required (0-100)'),
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['salon_id'], ['salons.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_services_category'), 'services', ['category'], unique=False)
    op.create_index(op.f('ix_services_name'), 'services', ['name'], unique=False)
    op.create_index(op.f('ix_services_salon_id'), 'services', ['salon_id'], unique=False)
    op.create_table('availabilities',
    sa.Column('professional_id', sa.Integer(), nullable=False, comment='Professional for this availability slot'),
    sa.Column('day_of_week', sa.Enum('MONDAY', 'TUESDAY', 'WEDNESDAY', 'THURSDAY', 'FRIDAY', 'SATURDAY', 'SUNDAY', name='dayofweek', native_enum=False), nullable=False, comment='Day of week (0=Monday, 6=Sunday)'),
    sa.Column('start_time', sa.Time(), nullable=False, comment='Start time of availability slot'),
    sa.Column('end_time', sa.Time(), nullable=False, comment='End time of availability slot'),
    sa.Column('slot_duration_minutes', sa.Integer(), nullable=False, comment='Duration of each booking slot in minutes (default: 30)'),
    sa.Column('is_active', sa.Boolean(), nullable=False, comment='Whether this availability slot is active'),
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['professional_id'], ['professionals.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_availabilities_professional_id'), 'availabilities', ['professional_id'], unique=False)
    op.create_table('bookings',
    sa.Column('client_id', sa.Integer(), nullable=False, comment='Client who made the booking'),
    sa.Column('professional_id', sa.Integer(), nullable=False, comment='Professional assigned to this booking'),
    sa.Column('service_id', sa.Integer(), nullable=False, comment='Service to be performed'),
    sa.Column('scheduled_at', sa.DateTime(timezone=True), nullable=False, comment='Scheduled date and time for the service'),
    sa.Column('duration_minutes', sa.Integer(), nullable=False, comment='Expected duration in minutes (copied from service)'),
    sa.Column('status', sa.Enum('PENDING', 'CONFIRMED', 'IN_PROGRESS', 'COMPLETED', 'CANCELLED', 'NO_SHOW', name='bookingstatus', native_enum=False), nullable=False, comment='Current booking status'),
    sa.Column('service_price', sa.Numeric(precision=10, scale=2), nullable=False, comment='Service price at booking time (BRL)'),
    sa.Column('deposit_amount', sa.Numeric(precision=10, scale=2), nullable=True, comment='Deposit/prepayment amount (BRL)'),
    sa.Column('notes', sa.Text(), nullable=True, comment='Client notes or special requests'),
    sa.Column('cancelled_at', sa.DateTime(timezone=True), nullable=True, comment='When booking was cancelled'),
    sa.Column('cancellation_reason', sa.String(length=255), nullable=True, comment='Reason for cancellation'),
    sa.Column('cancelled_by_id', sa.Integer(), nullable=True, comment='User who cancelled the booking'),
    sa.Column('completed_at', sa.DateTime(timezone=True), nullable=True, comment='When service was completed'),
    sa.Column('marked_no_show_at', sa.DateTime(timezone=True), nullable=True, comment='When client was marked as no-show'),
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['cancelled_by_id'], ['users.id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['client_id'], ['users.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['professional_id'], ['professionals.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['service_id'], ['services.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_bookings_client_id'), 'bookings', ['client_id'], unique=False)
    op.create_index(op.f('ix_bookings_professional_id'), 'bookings', ['professional_id'], unique=False)
    op.create_index(op.f('ix_bookings_scheduled_at'), 'bookings', ['scheduled_at'], unique=False)
    op.create_index(op.f('ix_bookings_service_id'), 'bookings', ['service_id'], unique=False)
    op.create_index(op.f('ix_bookings_status'), 'bookings', ['status'], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_bookings_status'), table_name='bookings')
    op.drop_index(op.f('ix_bookings_service_id'), table_name='bookings')
    op.drop_index(op.f('ix_bookings_scheduled_at'), table_name='bookings')
    op.drop_index(op.f('ix_bookings_professional_id'), table_name='bookings')
    op.drop_index(op.f('ix_bookings_client_id'), table_name='bookings')
    op.drop_table('bookings')
    op.drop_index(op.f('ix_availabilities_professional_id'), table_name='availabilities')
    op.drop_table('availabilities')
    op.drop_index(op.f('ix_services_salon_id'), table_name='services')
    op.drop_index(op.f('ix_services_name'), table_name='services')
    op.drop_index(op.f('ix_services_category'), table_name='services')
    op.drop_table('services')
    op.drop_index(op.f('ix_professionals_user_id'), table_name='professionals')
    op.drop_index(op.f('ix_professionals_salon_id'), table_name='professionals')
    op.drop_table('professionals')
    op.drop_index(op.f('ix_salons_owner_id'), table_name='salons')
    op.drop_index(op.f('ix_salons_name'), table_name='salons')
    op.drop_index(op.f('ix_salons_cnpj'), table_name='salons')
    op.drop_table('salons')
    op.drop_index(op.f('ix_users_email'), table_name='users')
    op.drop_table('users')
    # ### end Alembic commands ###
