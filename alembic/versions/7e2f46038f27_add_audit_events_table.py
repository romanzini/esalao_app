"""Mako template for Alembic migrations."""

"""Add audit_events table

Revision ID: 7e2f46038f27
Revises: 6f0fec906ba2
Create Date: 2025-10-21 13:05:34.601253

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = '7e2f46038f27'
down_revision = '6f0fec906ba2'
branch_labels = None
depends_on = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('audit_events',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('event_type', sa.String(length=50), nullable=False),
    sa.Column('severity', sa.String(length=20), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=True),
    sa.Column('session_id', sa.String(length=255), nullable=True),
    sa.Column('user_role', sa.String(length=50), nullable=True),
    sa.Column('ip_address', sa.String(length=45), nullable=True),
    sa.Column('user_agent', sa.Text(), nullable=True),
    sa.Column('request_id', sa.String(length=255), nullable=True),
    sa.Column('endpoint', sa.String(length=255), nullable=True),
    sa.Column('http_method', sa.String(length=10), nullable=True),
    sa.Column('resource_type', sa.String(length=50), nullable=True),
    sa.Column('resource_id', sa.String(length=100), nullable=True),
    sa.Column('action', sa.String(length=100), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('old_values', sa.JSON(), nullable=True),
    sa.Column('new_values', sa.JSON(), nullable=True),
    sa.Column('event_metadata', sa.JSON(), nullable=True),
    sa.Column('timestamp', sa.DateTime(), nullable=False),
    sa.Column('correlation_id', sa.String(length=255), nullable=True),
    sa.Column('parent_event_id', sa.Integer(), nullable=True),
    sa.Column('success', sa.String(length=10), nullable=True),
    sa.Column('error_message', sa.Text(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_audit_events_correlation_id'), 'audit_events', ['correlation_id'], unique=False)
    op.create_index(op.f('ix_audit_events_event_type'), 'audit_events', ['event_type'], unique=False)
    op.create_index(op.f('ix_audit_events_id'), 'audit_events', ['id'], unique=False)
    op.create_index(op.f('ix_audit_events_ip_address'), 'audit_events', ['ip_address'], unique=False)
    op.create_index(op.f('ix_audit_events_parent_event_id'), 'audit_events', ['parent_event_id'], unique=False)
    op.create_index(op.f('ix_audit_events_request_id'), 'audit_events', ['request_id'], unique=False)
    op.create_index(op.f('ix_audit_events_resource_id'), 'audit_events', ['resource_id'], unique=False)
    op.create_index(op.f('ix_audit_events_resource_type'), 'audit_events', ['resource_type'], unique=False)
    op.create_index(op.f('ix_audit_events_session_id'), 'audit_events', ['session_id'], unique=False)
    op.create_index(op.f('ix_audit_events_timestamp'), 'audit_events', ['timestamp'], unique=False)
    op.create_index(op.f('ix_audit_events_user_id'), 'audit_events', ['user_id'], unique=False)
    op.create_table('notification_templates',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False, comment='Unique identifier for notification template'),
    sa.Column('name', sa.String(length=100), nullable=False, comment='Unique template name/identifier'),
    sa.Column('event_type', sa.Enum('BOOKING_CONFIRMED', 'BOOKING_REMINDER', 'BOOKING_CANCELLED', 'BOOKING_RESCHEDULED', 'BOOKING_COMPLETED', 'PAYMENT_RECEIVED', 'PAYMENT_FAILED', 'REFUND_PROCESSED', 'POINTS_EARNED', 'TIER_UPGRADED', 'REWARD_AVAILABLE', 'POINTS_EXPIRING', 'WAITLIST_ADDED', 'SLOT_AVAILABLE', 'WAITLIST_EXPIRED', 'NO_SHOW_DETECTED', 'NO_SHOW_FEE_CHARGED', 'NEW_BOOKING', 'CANCELLATION_NOTICE', 'CLIENT_NO_SHOW', 'PROMOTIONAL_OFFER', 'BIRTHDAY_GREETING', 'ANNIVERSARY_OFFER', 'PASSWORD_RESET', 'EMAIL_VERIFICATION', 'ACCOUNT_LOCKED', name='notificationeventtype'), nullable=False, comment='Event type this template handles'),
    sa.Column('channel', sa.Enum('EMAIL', 'SMS', 'PUSH', 'IN_APP', 'WHATSAPP', name='notificationchannel'), nullable=False, comment='Channel this template is for'),
    sa.Column('subject', sa.String(length=200), nullable=True, comment='Subject line for email/SMS title'),
    sa.Column('body_template', sa.Text(), nullable=False, comment='Template body with variable placeholders'),
    sa.Column('variables', sa.JSON(), nullable=False, comment='Available template variables and descriptions'),
    sa.Column('priority', sa.Enum('LOW', 'NORMAL', 'HIGH', 'URGENT', 'CRITICAL', name='notificationpriority'), nullable=False, comment='Default priority for this template'),
    sa.Column('is_active', sa.Boolean(), nullable=False, comment='Whether template is active'),
    sa.Column('locale', sa.String(length=10), nullable=False, comment='Language/locale for this template'),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False, comment='When template was created'),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=False, comment='When template was last updated'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('event_type', 'channel', 'locale', name='uq_template_event_channel_locale')
    )
    op.create_index('ix_notification_templates_active', 'notification_templates', ['is_active'], unique=False)
    op.create_index(op.f('ix_notification_templates_channel'), 'notification_templates', ['channel'], unique=False)
    op.create_index('ix_notification_templates_event_channel', 'notification_templates', ['event_type', 'channel'], unique=False)
    op.create_index(op.f('ix_notification_templates_event_type'), 'notification_templates', ['event_type'], unique=False)
    op.create_index(op.f('ix_notification_templates_is_active'), 'notification_templates', ['is_active'], unique=False)
    op.create_index(op.f('ix_notification_templates_name'), 'notification_templates', ['name'], unique=True)
    op.create_table('loyalty_accounts',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False, comment='Unique identifier for loyalty account'),
    sa.Column('user_id', sa.Integer(), nullable=False, comment='User who owns this loyalty account'),
    sa.Column('current_points', sa.Integer(), nullable=False, comment='Current available points balance'),
    sa.Column('lifetime_points', sa.Integer(), nullable=False, comment='Total points earned throughout account lifetime'),
    sa.Column('current_tier', sa.Enum('BRONZE', 'SILVER', 'GOLD', 'PLATINUM', 'DIAMOND', name='loyaltytier'), nullable=False, comment='Current loyalty tier'),
    sa.Column('tier_points', sa.Integer(), nullable=False, comment='Points accumulated in current tier period'),
    sa.Column('next_tier_threshold', sa.Integer(), nullable=True, comment='Points needed to reach next tier'),
    sa.Column('tier_expiry_date', sa.DateTime(timezone=True), nullable=True, comment='When current tier expires (if applicable)'),
    sa.Column('join_date', sa.DateTime(timezone=True), nullable=False, comment='When loyalty account was created'),
    sa.Column('last_activity_date', sa.DateTime(timezone=True), nullable=True, comment='Last point transaction date'),
    sa.Column('is_active', sa.Boolean(), nullable=False, comment='Whether account is active'),
    sa.Column('suspended_until', sa.DateTime(timezone=True), nullable=True, comment='Account suspension end date'),
    sa.Column('total_bookings', sa.Integer(), nullable=False, comment='Total completed bookings'),
    sa.Column('total_spent', sa.Numeric(precision=10, scale=2), nullable=False, comment='Total amount spent'),
    sa.Column('referrals_count', sa.Integer(), nullable=False, comment='Number of successful referrals'),
    sa.Column('email_notifications', sa.Boolean(), nullable=False, comment='Receive email notifications about points'),
    sa.Column('sms_notifications', sa.Boolean(), nullable=False, comment='Receive SMS notifications about points'),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False, comment='Record creation timestamp'),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=False, comment='Last update timestamp'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_loyalty_points', 'loyalty_accounts', ['current_points'], unique=False)
    op.create_index('idx_loyalty_tier_points', 'loyalty_accounts', ['tier_points'], unique=False)
    op.create_index('idx_loyalty_user_tier', 'loyalty_accounts', ['user_id', 'current_tier'], unique=False)
    op.create_index(op.f('ix_loyalty_accounts_current_tier'), 'loyalty_accounts', ['current_tier'], unique=False)
    op.create_index(op.f('ix_loyalty_accounts_user_id'), 'loyalty_accounts', ['user_id'], unique=True)
    op.create_table('notification_preferences',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False, comment='Unique identifier for notification preference'),
    sa.Column('user_id', sa.Integer(), nullable=False, comment='User who owns these preferences'),
    sa.Column('event_type', sa.Enum('BOOKING_CONFIRMED', 'BOOKING_REMINDER', 'BOOKING_CANCELLED', 'BOOKING_RESCHEDULED', 'BOOKING_COMPLETED', 'PAYMENT_RECEIVED', 'PAYMENT_FAILED', 'REFUND_PROCESSED', 'POINTS_EARNED', 'TIER_UPGRADED', 'REWARD_AVAILABLE', 'POINTS_EXPIRING', 'WAITLIST_ADDED', 'SLOT_AVAILABLE', 'WAITLIST_EXPIRED', 'NO_SHOW_DETECTED', 'NO_SHOW_FEE_CHARGED', 'NEW_BOOKING', 'CANCELLATION_NOTICE', 'CLIENT_NO_SHOW', 'PROMOTIONAL_OFFER', 'BIRTHDAY_GREETING', 'ANNIVERSARY_OFFER', 'PASSWORD_RESET', 'EMAIL_VERIFICATION', 'ACCOUNT_LOCKED', name='notificationeventtype'), nullable=False, comment='Type of event this preference applies to'),
    sa.Column('channel', sa.Enum('EMAIL', 'SMS', 'PUSH', 'IN_APP', 'WHATSAPP', name='notificationchannel'), nullable=False, comment='Notification channel'),
    sa.Column('enabled', sa.Boolean(), nullable=False, comment='Whether notifications are enabled for this combination'),
    sa.Column('advance_minutes', sa.Integer(), nullable=True, comment='Minutes in advance for reminder notifications'),
    sa.Column('quiet_hours_start', sa.String(length=5), nullable=True, comment='Start time for quiet hours (no notifications)'),
    sa.Column('quiet_hours_end', sa.String(length=5), nullable=True, comment='End time for quiet hours'),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False, comment='When preference was created'),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=False, comment='When preference was last updated'),
    sa.CheckConstraint('advance_minutes IS NULL OR advance_minutes >= 0', name='ck_positive_advance_minutes'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('user_id', 'event_type', 'channel', name='uq_user_event_channel')
    )
    op.create_index(op.f('ix_notification_preferences_channel'), 'notification_preferences', ['channel'], unique=False)
    op.create_index(op.f('ix_notification_preferences_event_type'), 'notification_preferences', ['event_type'], unique=False)
    op.create_index(op.f('ix_notification_preferences_user_id'), 'notification_preferences', ['user_id'], unique=False)
    op.create_index('ix_notification_prefs_channel_enabled', 'notification_preferences', ['channel', 'enabled'], unique=False)
    op.create_index('ix_notification_prefs_user_event', 'notification_preferences', ['user_id', 'event_type'], unique=False)
    op.create_table('notification_queue',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False, comment='Unique identifier for queued notification'),
    sa.Column('user_id', sa.Integer(), nullable=False, comment='User to send notification to'),
    sa.Column('template_id', sa.Integer(), nullable=False, comment='Template to use for notification'),
    sa.Column('channel', sa.Enum('EMAIL', 'SMS', 'PUSH', 'IN_APP', 'WHATSAPP', name='notificationchannel'), nullable=False, comment='Channel to send notification through'),
    sa.Column('priority', sa.Enum('LOW', 'NORMAL', 'HIGH', 'URGENT', 'CRITICAL', name='notificationpriority'), nullable=False, comment='Notification priority'),
    sa.Column('status', sa.Enum('PENDING', 'QUEUED', 'SENT', 'DELIVERED', 'FAILED', 'RETRYING', 'CANCELLED', name='notificationstatus'), nullable=False, comment='Current notification status'),
    sa.Column('subject', sa.String(length=200), nullable=True, comment='Rendered subject line'),
    sa.Column('body', sa.Text(), nullable=False, comment='Rendered notification body'),
    sa.Column('context_data', sa.JSON(), nullable=False, comment='Context data used for rendering'),
    sa.Column('scheduled_at', sa.DateTime(timezone=True), nullable=False, comment='When notification should be sent'),
    sa.Column('sent_at', sa.DateTime(timezone=True), nullable=True, comment='When notification was actually sent'),
    sa.Column('retry_count', sa.Integer(), nullable=False, comment='Number of retry attempts'),
    sa.Column('max_retries', sa.Integer(), nullable=False, comment='Maximum retry attempts'),
    sa.Column('next_retry_at', sa.DateTime(timezone=True), nullable=True, comment='When to attempt next retry'),
    sa.Column('last_error', sa.Text(), nullable=True, comment='Last error message if failed'),
    sa.Column('correlation_id', sa.String(length=100), nullable=True, comment='External correlation ID (booking ID, payment ID, etc.)'),
    sa.Column('external_id', sa.String(length=100), nullable=True, comment='External service notification ID'),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False, comment='When notification was queued'),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=False, comment='When notification was last updated'),
    sa.CheckConstraint('max_retries >= 0', name='ck_positive_max_retries'),
    sa.CheckConstraint('retry_count >= 0', name='ck_positive_retry_count'),
    sa.ForeignKeyConstraint(['template_id'], ['notification_templates.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_notification_queue_channel'), 'notification_queue', ['channel'], unique=False)
    op.create_index('ix_notification_queue_correlation', 'notification_queue', ['correlation_id'], unique=False)
    op.create_index(op.f('ix_notification_queue_correlation_id'), 'notification_queue', ['correlation_id'], unique=False)
    op.create_index(op.f('ix_notification_queue_priority'), 'notification_queue', ['priority'], unique=False)
    op.create_index('ix_notification_queue_priority_status', 'notification_queue', ['priority', 'status'], unique=False)
    op.create_index('ix_notification_queue_retry', 'notification_queue', ['next_retry_at', 'retry_count'], unique=False)
    op.create_index(op.f('ix_notification_queue_scheduled_at'), 'notification_queue', ['scheduled_at'], unique=False)
    op.create_index(op.f('ix_notification_queue_status'), 'notification_queue', ['status'], unique=False)
    op.create_index('ix_notification_queue_status_scheduled', 'notification_queue', ['status', 'scheduled_at'], unique=False)
    op.create_index(op.f('ix_notification_queue_template_id'), 'notification_queue', ['template_id'], unique=False)
    op.create_index(op.f('ix_notification_queue_user_id'), 'notification_queue', ['user_id'], unique=False)
    op.create_table('notification_logs',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False, comment='Unique identifier for log entry'),
    sa.Column('queue_id', sa.Integer(), nullable=True, comment='Associated queue item'),
    sa.Column('user_id', sa.Integer(), nullable=False, comment='User notification was sent to'),
    sa.Column('channel', sa.Enum('EMAIL', 'SMS', 'PUSH', 'IN_APP', 'WHATSAPP', name='notificationchannel'), nullable=False, comment='Channel used for delivery'),
    sa.Column('event_type', sa.Enum('BOOKING_CONFIRMED', 'BOOKING_REMINDER', 'BOOKING_CANCELLED', 'BOOKING_RESCHEDULED', 'BOOKING_COMPLETED', 'PAYMENT_RECEIVED', 'PAYMENT_FAILED', 'REFUND_PROCESSED', 'POINTS_EARNED', 'TIER_UPGRADED', 'REWARD_AVAILABLE', 'POINTS_EXPIRING', 'WAITLIST_ADDED', 'SLOT_AVAILABLE', 'WAITLIST_EXPIRED', 'NO_SHOW_DETECTED', 'NO_SHOW_FEE_CHARGED', 'NEW_BOOKING', 'CANCELLATION_NOTICE', 'CLIENT_NO_SHOW', 'PROMOTIONAL_OFFER', 'BIRTHDAY_GREETING', 'ANNIVERSARY_OFFER', 'PASSWORD_RESET', 'EMAIL_VERIFICATION', 'ACCOUNT_LOCKED', name='notificationeventtype'), nullable=False, comment='Event type that triggered notification'),
    sa.Column('status', sa.Enum('PENDING', 'QUEUED', 'SENT', 'DELIVERED', 'FAILED', 'RETRYING', 'CANCELLED', name='notificationstatus'), nullable=False, comment='Final delivery status'),
    sa.Column('subject', sa.String(length=200), nullable=True, comment='Subject line that was sent'),
    sa.Column('sent_at', sa.DateTime(timezone=True), nullable=False, comment='When delivery was attempted'),
    sa.Column('delivered_at', sa.DateTime(timezone=True), nullable=True, comment='When delivery was confirmed'),
    sa.Column('external_id', sa.String(length=100), nullable=True, comment='External service notification ID'),
    sa.Column('provider_response', sa.JSON(), nullable=True, comment='Response from notification provider'),
    sa.Column('error_message', sa.Text(), nullable=True, comment='Error message if delivery failed'),
    sa.Column('error_code', sa.String(length=50), nullable=True, comment='Error code from provider'),
    sa.Column('correlation_id', sa.String(length=100), nullable=True, comment='Correlation ID for tracking'),
    sa.ForeignKeyConstraint(['queue_id'], ['notification_queue.id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_notification_logs_channel'), 'notification_logs', ['channel'], unique=False)
    op.create_index('ix_notification_logs_channel_status', 'notification_logs', ['channel', 'status'], unique=False)
    op.create_index('ix_notification_logs_correlation', 'notification_logs', ['correlation_id'], unique=False)
    op.create_index(op.f('ix_notification_logs_correlation_id'), 'notification_logs', ['correlation_id'], unique=False)
    op.create_index(op.f('ix_notification_logs_event_type'), 'notification_logs', ['event_type'], unique=False)
    op.create_index(op.f('ix_notification_logs_queue_id'), 'notification_logs', ['queue_id'], unique=False)
    op.create_index(op.f('ix_notification_logs_sent_at'), 'notification_logs', ['sent_at'], unique=False)
    op.create_index(op.f('ix_notification_logs_status'), 'notification_logs', ['status'], unique=False)
    op.create_index('ix_notification_logs_status_sent', 'notification_logs', ['status', 'sent_at'], unique=False)
    op.create_index('ix_notification_logs_user_event', 'notification_logs', ['user_id', 'event_type'], unique=False)
    op.create_index(op.f('ix_notification_logs_user_id'), 'notification_logs', ['user_id'], unique=False)
    op.create_table('loyalty_rewards',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False, comment='Unique identifier for loyalty reward'),
    sa.Column('name', sa.String(length=200), nullable=False, comment='Reward name'),
    sa.Column('description', sa.Text(), nullable=True, comment='Detailed reward description'),
    sa.Column('redemption_type', sa.Enum('DISCOUNT', 'FREE_SERVICE', 'UPGRADE', 'GIFT_CARD', 'MERCHANDISE', name='pointredemptiontype'), nullable=False, comment='Type of redemption'),
    sa.Column('point_cost', sa.Integer(), nullable=False, comment='Points required to redeem this reward'),
    sa.Column('monetary_value', sa.Numeric(precision=10, scale=2), nullable=True, comment='Equivalent monetary value'),
    sa.Column('is_active', sa.Boolean(), nullable=False, comment='Whether reward is currently available'),
    sa.Column('available_from', sa.DateTime(timezone=True), nullable=True, comment='When reward becomes available'),
    sa.Column('available_until', sa.DateTime(timezone=True), nullable=True, comment='When reward expires'),
    sa.Column('max_redemptions_per_user', sa.Integer(), nullable=True, comment='Maximum times a user can redeem this reward'),
    sa.Column('total_available', sa.Integer(), nullable=True, comment='Total number of this reward available'),
    sa.Column('total_redeemed', sa.Integer(), nullable=False, comment='Total number of times this reward has been redeemed'),
    sa.Column('minimum_tier', sa.Enum('BRONZE', 'SILVER', 'GOLD', 'PLATINUM', 'DIAMOND', name='loyaltytier'), nullable=True, comment='Minimum tier required to redeem'),
    sa.Column('service_id', sa.Integer(), nullable=True, comment='Associated service (for service-based rewards)'),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False, comment='Record creation timestamp'),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=False, comment='Last update timestamp'),
    sa.ForeignKeyConstraint(['service_id'], ['services.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_loyalty_reward_availability', 'loyalty_rewards', ['available_from', 'available_until'], unique=False)
    op.create_index('idx_loyalty_reward_cost_active', 'loyalty_rewards', ['point_cost', 'is_active'], unique=False)
    op.create_index('idx_loyalty_reward_tier', 'loyalty_rewards', ['minimum_tier'], unique=False)
    op.create_index('idx_loyalty_reward_type', 'loyalty_rewards', ['redemption_type'], unique=False)
    op.create_index(op.f('ix_loyalty_rewards_is_active'), 'loyalty_rewards', ['is_active'], unique=False)
    op.create_index(op.f('ix_loyalty_rewards_point_cost'), 'loyalty_rewards', ['point_cost'], unique=False)
    op.create_index(op.f('ix_loyalty_rewards_redemption_type'), 'loyalty_rewards', ['redemption_type'], unique=False)
    op.create_index(op.f('ix_loyalty_rewards_service_id'), 'loyalty_rewards', ['service_id'], unique=False)
    op.create_table('point_transactions',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False, comment='Unique identifier for point transaction'),
    sa.Column('loyalty_account_id', sa.Integer(), nullable=False, comment='Loyalty account for this transaction'),
    sa.Column('booking_id', sa.Integer(), nullable=True, comment='Related booking (if applicable)'),
    sa.Column('transaction_type', sa.Enum('EARNED', 'REDEEMED', 'EXPIRED', 'BONUS', 'ADJUSTMENT', 'REFUND', name='pointtransactiontype'), nullable=False, comment='Type of point transaction'),
    sa.Column('points_amount', sa.Integer(), nullable=False, comment='Number of points (positive for earned, negative for redeemed)'),
    sa.Column('balance_after', sa.Integer(), nullable=False, comment='Point balance after this transaction'),
    sa.Column('earn_reason', sa.Enum('BOOKING_COMPLETED', 'REFERRAL', 'REVIEW_SUBMITTED', 'BIRTHDAY_BONUS', 'PROMOTION', 'SIGNUP_BONUS', 'LOYALTY_MILESTONE', name='pointearnreason'), nullable=True, comment='Reason for earning points'),
    sa.Column('redemption_type', sa.Enum('DISCOUNT', 'FREE_SERVICE', 'UPGRADE', 'GIFT_CARD', 'MERCHANDISE', name='pointredemptiontype'), nullable=True, comment='Type of point redemption'),
    sa.Column('monetary_value', sa.Numeric(precision=10, scale=2), nullable=True, comment='Monetary value associated with transaction'),
    sa.Column('discount_applied', sa.Numeric(precision=10, scale=2), nullable=True, comment='Discount amount applied (for redemptions)'),
    sa.Column('expiry_date', sa.DateTime(timezone=True), nullable=True, comment='When these points expire (for earned points)'),
    sa.Column('is_expired', sa.Boolean(), nullable=False, comment='Whether these points have expired'),
    sa.Column('description', sa.Text(), nullable=True, comment='Human-readable description of transaction'),
    sa.Column('reference_id', sa.String(length=100), nullable=True, comment='External reference ID'),
    sa.Column('processed_by_user_id', sa.Integer(), nullable=True, comment='User who processed this transaction (for manual adjustments)'),
    sa.Column('transaction_date', sa.DateTime(timezone=True), nullable=False, comment='When transaction occurred'),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False, comment='Record creation timestamp'),
    sa.ForeignKeyConstraint(['booking_id'], ['bookings.id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['loyalty_account_id'], ['loyalty_accounts.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['processed_by_user_id'], ['users.id'], ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_point_transaction_account_date', 'point_transactions', ['loyalty_account_id', 'transaction_date'], unique=False)
    op.create_index('idx_point_transaction_booking', 'point_transactions', ['booking_id'], unique=False)
    op.create_index('idx_point_transaction_expiry', 'point_transactions', ['expiry_date', 'is_expired'], unique=False)
    op.create_index('idx_point_transaction_type_date', 'point_transactions', ['transaction_type', 'transaction_date'], unique=False)
    op.create_index(op.f('ix_point_transactions_booking_id'), 'point_transactions', ['booking_id'], unique=False)
    op.create_index(op.f('ix_point_transactions_is_expired'), 'point_transactions', ['is_expired'], unique=False)
    op.create_index(op.f('ix_point_transactions_loyalty_account_id'), 'point_transactions', ['loyalty_account_id'], unique=False)
    op.create_index(op.f('ix_point_transactions_reference_id'), 'point_transactions', ['reference_id'], unique=False)
    op.create_index(op.f('ix_point_transactions_transaction_date'), 'point_transactions', ['transaction_date'], unique=False)
    op.create_index(op.f('ix_point_transactions_transaction_type'), 'point_transactions', ['transaction_type'], unique=False)
    op.create_table('waitlists',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False, comment='Unique identifier for waitlist entry'),
    sa.Column('client_id', sa.Integer(), nullable=False, comment='Client requesting the slot'),
    sa.Column('professional_id', sa.Integer(), nullable=False, comment='Requested professional'),
    sa.Column('service_id', sa.Integer(), nullable=False, comment='Requested service'),
    sa.Column('unit_id', sa.Integer(), nullable=False, comment='Salon/unit where service will be performed'),
    sa.Column('preferred_datetime', sa.DateTime(timezone=True), nullable=False, comment='Preferred appointment time'),
    sa.Column('flexibility_hours', sa.Integer(), nullable=False, comment='Hours of flexibility around preferred time'),
    sa.Column('status', sa.Enum('WAITING', 'OFFERED', 'ACCEPTED', 'DECLINED', 'EXPIRED', 'CANCELLED', name='waitliststatus'), nullable=False, comment='Current status of waitlist entry'),
    sa.Column('priority', sa.Enum('LOW', 'NORMAL', 'HIGH', 'URGENT', name='waitlistpriority'), nullable=False, comment='Priority level in the queue'),
    sa.Column('position', sa.Integer(), nullable=False, comment='Position in the waitlist queue'),
    sa.Column('joined_at', sa.DateTime(timezone=True), nullable=False, comment='When client joined the waitlist'),
    sa.Column('offered_at', sa.DateTime(timezone=True), nullable=True, comment='When slot was offered to client'),
    sa.Column('offered_slot_start', sa.DateTime(timezone=True), nullable=True, comment='Start time of offered slot'),
    sa.Column('offered_slot_end', sa.DateTime(timezone=True), nullable=True, comment='End time of offered slot'),
    sa.Column('offer_expires_at', sa.DateTime(timezone=True), nullable=True, comment='When the offer expires'),
    sa.Column('responded_at', sa.DateTime(timezone=True), nullable=True, comment='When client responded to offer'),
    sa.Column('response_notes', sa.Text(), nullable=True, comment="Client's response notes or decline reason"),
    sa.Column('booking_id', sa.Integer(), nullable=True, comment='Created booking if offer was accepted'),
    sa.Column('notes', sa.Text(), nullable=True, comment='Additional notes or special requests'),
    sa.Column('notify_email', sa.Boolean(), nullable=False, comment='Send email notifications'),
    sa.Column('notify_sms', sa.Boolean(), nullable=False, comment='Send SMS notifications'),
    sa.Column('notify_push', sa.Boolean(), nullable=False, comment='Send push notifications'),
    sa.ForeignKeyConstraint(['booking_id'], ['bookings.id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['client_id'], ['users.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['professional_id'], ['professionals.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['service_id'], ['services.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['unit_id'], ['salons.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('client_id', 'professional_id', 'service_id', 'preferred_datetime', name='uq_waitlist_client_professional_service_datetime')
    )
    op.create_index(op.f('ix_waitlists_client_id'), 'waitlists', ['client_id'], unique=False)
    op.create_index(op.f('ix_waitlists_position'), 'waitlists', ['position'], unique=False)
    op.create_index(op.f('ix_waitlists_preferred_datetime'), 'waitlists', ['preferred_datetime'], unique=False)
    op.create_index(op.f('ix_waitlists_priority'), 'waitlists', ['priority'], unique=False)
    op.create_index(op.f('ix_waitlists_professional_id'), 'waitlists', ['professional_id'], unique=False)
    op.create_index(op.f('ix_waitlists_service_id'), 'waitlists', ['service_id'], unique=False)
    op.create_index(op.f('ix_waitlists_status'), 'waitlists', ['status'], unique=False)
    op.create_index(op.f('ix_waitlists_unit_id'), 'waitlists', ['unit_id'], unique=False)
    op.add_column('bookings', sa.Column('marked_no_show_by_id', sa.Integer(), nullable=True, comment='User who marked the booking as no-show'))
    op.add_column('bookings', sa.Column('no_show_fee_amount', sa.Numeric(precision=10, scale=2), nullable=True, comment='No-show fee charged (BRL)'))
    op.add_column('bookings', sa.Column('no_show_reason', sa.String(length=255), nullable=True, comment='Reason for marking as no-show'))
    op.create_foreign_key(None, 'bookings', 'users', ['marked_no_show_by_id'], ['id'], ondelete='SET NULL')
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint(None, 'bookings', type_='foreignkey')
    op.drop_column('bookings', 'no_show_reason')
    op.drop_column('bookings', 'no_show_fee_amount')
    op.drop_column('bookings', 'marked_no_show_by_id')
    op.drop_index(op.f('ix_waitlists_unit_id'), table_name='waitlists')
    op.drop_index(op.f('ix_waitlists_status'), table_name='waitlists')
    op.drop_index(op.f('ix_waitlists_service_id'), table_name='waitlists')
    op.drop_index(op.f('ix_waitlists_professional_id'), table_name='waitlists')
    op.drop_index(op.f('ix_waitlists_priority'), table_name='waitlists')
    op.drop_index(op.f('ix_waitlists_preferred_datetime'), table_name='waitlists')
    op.drop_index(op.f('ix_waitlists_position'), table_name='waitlists')
    op.drop_index(op.f('ix_waitlists_client_id'), table_name='waitlists')
    op.drop_table('waitlists')
    op.drop_index(op.f('ix_point_transactions_transaction_type'), table_name='point_transactions')
    op.drop_index(op.f('ix_point_transactions_transaction_date'), table_name='point_transactions')
    op.drop_index(op.f('ix_point_transactions_reference_id'), table_name='point_transactions')
    op.drop_index(op.f('ix_point_transactions_loyalty_account_id'), table_name='point_transactions')
    op.drop_index(op.f('ix_point_transactions_is_expired'), table_name='point_transactions')
    op.drop_index(op.f('ix_point_transactions_booking_id'), table_name='point_transactions')
    op.drop_index('idx_point_transaction_type_date', table_name='point_transactions')
    op.drop_index('idx_point_transaction_expiry', table_name='point_transactions')
    op.drop_index('idx_point_transaction_booking', table_name='point_transactions')
    op.drop_index('idx_point_transaction_account_date', table_name='point_transactions')
    op.drop_table('point_transactions')
    op.drop_index(op.f('ix_loyalty_rewards_service_id'), table_name='loyalty_rewards')
    op.drop_index(op.f('ix_loyalty_rewards_redemption_type'), table_name='loyalty_rewards')
    op.drop_index(op.f('ix_loyalty_rewards_point_cost'), table_name='loyalty_rewards')
    op.drop_index(op.f('ix_loyalty_rewards_is_active'), table_name='loyalty_rewards')
    op.drop_index('idx_loyalty_reward_type', table_name='loyalty_rewards')
    op.drop_index('idx_loyalty_reward_tier', table_name='loyalty_rewards')
    op.drop_index('idx_loyalty_reward_cost_active', table_name='loyalty_rewards')
    op.drop_index('idx_loyalty_reward_availability', table_name='loyalty_rewards')
    op.drop_table('loyalty_rewards')
    op.drop_index(op.f('ix_notification_logs_user_id'), table_name='notification_logs')
    op.drop_index('ix_notification_logs_user_event', table_name='notification_logs')
    op.drop_index('ix_notification_logs_status_sent', table_name='notification_logs')
    op.drop_index(op.f('ix_notification_logs_status'), table_name='notification_logs')
    op.drop_index(op.f('ix_notification_logs_sent_at'), table_name='notification_logs')
    op.drop_index(op.f('ix_notification_logs_queue_id'), table_name='notification_logs')
    op.drop_index(op.f('ix_notification_logs_event_type'), table_name='notification_logs')
    op.drop_index(op.f('ix_notification_logs_correlation_id'), table_name='notification_logs')
    op.drop_index('ix_notification_logs_correlation', table_name='notification_logs')
    op.drop_index('ix_notification_logs_channel_status', table_name='notification_logs')
    op.drop_index(op.f('ix_notification_logs_channel'), table_name='notification_logs')
    op.drop_table('notification_logs')
    op.drop_index(op.f('ix_notification_queue_user_id'), table_name='notification_queue')
    op.drop_index(op.f('ix_notification_queue_template_id'), table_name='notification_queue')
    op.drop_index('ix_notification_queue_status_scheduled', table_name='notification_queue')
    op.drop_index(op.f('ix_notification_queue_status'), table_name='notification_queue')
    op.drop_index(op.f('ix_notification_queue_scheduled_at'), table_name='notification_queue')
    op.drop_index('ix_notification_queue_retry', table_name='notification_queue')
    op.drop_index('ix_notification_queue_priority_status', table_name='notification_queue')
    op.drop_index(op.f('ix_notification_queue_priority'), table_name='notification_queue')
    op.drop_index(op.f('ix_notification_queue_correlation_id'), table_name='notification_queue')
    op.drop_index('ix_notification_queue_correlation', table_name='notification_queue')
    op.drop_index(op.f('ix_notification_queue_channel'), table_name='notification_queue')
    op.drop_table('notification_queue')
    op.drop_index('ix_notification_prefs_user_event', table_name='notification_preferences')
    op.drop_index('ix_notification_prefs_channel_enabled', table_name='notification_preferences')
    op.drop_index(op.f('ix_notification_preferences_user_id'), table_name='notification_preferences')
    op.drop_index(op.f('ix_notification_preferences_event_type'), table_name='notification_preferences')
    op.drop_index(op.f('ix_notification_preferences_channel'), table_name='notification_preferences')
    op.drop_table('notification_preferences')
    op.drop_index(op.f('ix_loyalty_accounts_user_id'), table_name='loyalty_accounts')
    op.drop_index(op.f('ix_loyalty_accounts_current_tier'), table_name='loyalty_accounts')
    op.drop_index('idx_loyalty_user_tier', table_name='loyalty_accounts')
    op.drop_index('idx_loyalty_tier_points', table_name='loyalty_accounts')
    op.drop_index('idx_loyalty_points', table_name='loyalty_accounts')
    op.drop_table('loyalty_accounts')
    op.drop_index(op.f('ix_notification_templates_name'), table_name='notification_templates')
    op.drop_index(op.f('ix_notification_templates_is_active'), table_name='notification_templates')
    op.drop_index(op.f('ix_notification_templates_event_type'), table_name='notification_templates')
    op.drop_index('ix_notification_templates_event_channel', table_name='notification_templates')
    op.drop_index(op.f('ix_notification_templates_channel'), table_name='notification_templates')
    op.drop_index('ix_notification_templates_active', table_name='notification_templates')
    op.drop_table('notification_templates')
    op.drop_index(op.f('ix_audit_events_user_id'), table_name='audit_events')
    op.drop_index(op.f('ix_audit_events_timestamp'), table_name='audit_events')
    op.drop_index(op.f('ix_audit_events_session_id'), table_name='audit_events')
    op.drop_index(op.f('ix_audit_events_resource_type'), table_name='audit_events')
    op.drop_index(op.f('ix_audit_events_resource_id'), table_name='audit_events')
    op.drop_index(op.f('ix_audit_events_request_id'), table_name='audit_events')
    op.drop_index(op.f('ix_audit_events_parent_event_id'), table_name='audit_events')
    op.drop_index(op.f('ix_audit_events_ip_address'), table_name='audit_events')
    op.drop_index(op.f('ix_audit_events_id'), table_name='audit_events')
    op.drop_index(op.f('ix_audit_events_event_type'), table_name='audit_events')
    op.drop_index(op.f('ix_audit_events_correlation_id'), table_name='audit_events')
    op.drop_table('audit_events')
    # ### end Alembic commands ###
