version: "3.8"

services:
  db:
    image: postgres:15-alpine
    container_name: esalao_db
    environment:
      POSTGRES_USER: esalao_user
      POSTGRES_PASSWORD: esalao_pass
      POSTGRES_DB: esalao_db
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U esalao_user"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: esalao_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: esalao_api
    command: uvicorn backend.app.main:app --host 0.0.0.0 --port 8000 --reload
    ports:
      - "8000:8000"
    environment:
      - ENVIRONMENT=development
      - DEBUG=true
      - POSTGRES_SERVER=db
      - POSTGRES_PORT=5432
      - POSTGRES_USER=esalao_user
      - POSTGRES_PASSWORD=esalao_pass
      - POSTGRES_DB=esalao_db
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - SECRET_KEY=dev-secret-key-change-in-production-min-32-chars
    volumes:
      - ./backend:/app/backend
      - ./alembic:/app/alembic
      - ./tests:/app/tests
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy

  worker:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: esalao_worker
    command: celery -A backend.app.workers.celery_app worker --loglevel=info
    environment:
      - ENVIRONMENT=development
      - POSTGRES_SERVER=db
      - POSTGRES_PORT=5432
      - POSTGRES_USER=esalao_user
      - POSTGRES_PASSWORD=esalao_pass
      - POSTGRES_DB=esalao_db
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
    volumes:
      - ./backend:/app/backend
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy

volumes:
  postgres_data:
  redis_data:
