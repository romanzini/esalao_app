"""FastAPI application entry point."""

from contextlib import asynccontextmanager

from fastapi import FastAPI
from fastapi.responses import JSONResponse

from backend.app.core.config import settings
from backend.app.core.logging import setup_logging
from backend.app.core.metrics import (
    PrometheusMiddleware,
    metrics_endpoint,
)
from backend.app.core.rate_limit import limiter
from backend.app.core.tracing import setup_tracing
from backend.app.middleware.audit import AuditMiddleware
from backend.app.api.v1 import api_router


@asynccontextmanager
async def lifespan(app: FastAPI):
    """Application lifespan manager."""
    setup_logging()
    yield


app = FastAPI(
    title=settings.PROJECT_NAME,
    version=settings.VERSION,
    description="""
# Beauty Salon Marketplace Platform API

API completa para marketplace de agendamento de servi√ßos de beleza com sistema avan√ßado de pol√≠ticas, auditoria e relat√≥rios.

## Funcionalidades Principais

### Core Features
- **Autentica√ß√£o**: Sistema completo de registro, login e refresh de tokens JWT
- **Agendamento**: Busca de slots dispon√≠veis e cria√ß√£o de reservas
- **Gest√£o de Reservas**: CRUD completo com controle de status e cancelamento
- **Profissionais**: Gerenciamento de perfis de profissionais
- **Servi√ßos**: Cat√°logo de servi√ßos com pre√ßos e dura√ß√µes
- **RBAC**: Controle de acesso baseado em pap√©is (Admin, Client, Professional, Receptionist)

### Phase 3: Policies & Reporting (NEW)
- **Pol√≠ticas de Cancelamento**: Sistema hier√°rquico de taxas por tempo de anteced√™ncia
- **Detec√ß√£o de No-Show**: Sistema automatizado de identifica√ß√£o e marca√ß√£o
- **Auditoria**: Rastreamento completo de eventos do sistema
- **Relat√≥rios Operacionais**: Dashboard e m√©tricas para sal√µes
- **Relat√≥rios de Plataforma**: Analytics administrativos cross-salon
- **Otimiza√ß√£o de Performance**: Cache Redis e queries otimizadas

## Autentica√ß√£o

A API utiliza **JWT Bearer Tokens** para autentica√ß√£o.

1. Registre-se via `POST /api/v1/auth/register` ou fa√ßa login via `POST /api/v1/auth/login`
2. Utilize o `access_token` retornado no header `Authorization: Bearer {token}`
3. Quando o token expirar, use `POST /api/v1/auth/refresh` com o `refresh_token`

## Estrutura de Endpoints

### üîê Autentica√ß√£o (`/auth`)
- Registro e login de usu√°rios
- Refresh de tokens JWT
- Controle de sess√µes

### üìÖ Agendamento (`/bookings`, `/scheduling`)
- Busca de slots dispon√≠veis
- Cria√ß√£o e gest√£o de reservas
- Cancelamento com pol√≠ticas

### üë• Gest√£o (`/professionals`, `/services`)
- Cadastro de profissionais
- Cat√°logo de servi√ßos
- Configura√ß√£o de disponibilidades

### üí∞ Pagamentos (`/payments`, `/refunds`)
- Processamento de pagamentos
- Sistema de reembolsos
- M√©tricas financeiras

### üéØ Pol√≠ticas e Auditoria (`/cancellation-policies`, `/audit`)
- Pol√≠ticas tiered de cancelamento
- Sistema de auditoria completo
- Rastreamento de eventos

### üìä Relat√≥rios (`/reports`, `/platform-reports`, `/optimized-reports`)
- Dashboard operacional
- Analytics de plataforma
- Relat√≥rios otimizados com cache

### üö´ No-Show (`/no-show-jobs`)
- Detec√ß√£o automatizada
- Jobs de processamento
- Configura√ß√£o de regras

### üîî Notifica√ß√µes (`/notifications`)
- Sistema de notifica√ß√µes
- Templates customiz√°veis
- Integra√ß√£o com webhooks

### üéÅ Fidelidade (`/loyalty`, `/waitlist`)
- Programa de pontos
- Lista de espera
- Recompensas

## N√≠veis de Acesso

### üë§ Client
- Visualizar servi√ßos e profissionais
- Criar e gerenciar suas pr√≥prias reservas
- Acessar hist√≥rico pessoal

### üíº Professional
- Gerenciar pr√≥pria agenda
- Configurar disponibilidades
- Acessar relat√≥rios de performance

### üè¢ Salon Owner
- Gest√£o completa do sal√£o
- Relat√≥rios operacionais
- Configura√ß√£o de pol√≠ticas

### ‚ö° Admin
- Acesso completo ao sistema
- Relat√≥rios de plataforma
- Gest√£o de usu√°rios e pol√≠ticas globais

## Rate Limiting

A API implementa rate limiting para proteger contra abuso:
- **Login**: 5 tentativas por minuto
- **Geral**: 100 requests por minuto por IP
- **Reports**: 20 requests por minuto (cache-aware)

## Performance e Cache

O sistema utiliza **Redis** para otimiza√ß√£o:
- Cache de relat√≥rios (TTL configur√°vel)
- Sessions e rate limiting
- Query optimization autom√°tica

## Monitoring e Auditoria

- **Prometheus Metrics**: M√©tricas detalhadas de performance
- **Audit Events**: Log completo de a√ß√µes cr√≠ticas
- **Distributed Tracing**: Rastreamento de requests
- **Health Checks**: Monitoramento de sa√∫de da API

## Rate Limiting

- **Login**: M√°ximo de 5 tentativas por minuto por IP
- **Outros endpoints**: 100 requisi√ß√µes por minuto por IP
    """,
    lifespan=lifespan,
    docs_url="/docs",
    redoc_url="/redoc",
    openapi_url="/openapi.json",
    swagger_ui_parameters={
        "docExpansion": "none",
        "filter": True,
        "tryItOutEnabled": True,
        "persistAuthorization": True,
    },
)

# Add middlewares
app.add_middleware(PrometheusMiddleware)
app.add_middleware(AuditMiddleware)

# Setup tracing
setup_tracing(app)

# Add rate limiter
app.state.limiter = limiter

# Include API routers
app.include_router(api_router, prefix="/api")


@app.get("/health", tags=["Health"])
async def health_check():
    """Health check endpoint for monitoring and load balancers."""
    return JSONResponse(
        status_code=200,
        content={
            "status": "healthy",
            "service": settings.PROJECT_NAME,
            "version": settings.VERSION,
        },
    )


@app.get("/metrics", tags=["Monitoring"])
async def metrics():
    """Prometheus metrics endpoint."""
    return await metrics_endpoint()
